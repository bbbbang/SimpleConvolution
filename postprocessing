class Postprocessing_torch(Module):
	def __init__(self, class_num=7, input_size=320):
		super().__init__()
		self.class_num = class_num
		self.tensor_dim = input_size / 4.

		# debug
		self.duration = {1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0
						,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0
						,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0
						,31:0,32:0,33:0}
		self.count = 0

	def tr(self, tensor):
		m = tensor.transpose(1,2)
		m = m.transpose(2,3)

		return m

	def forward(self, x):
		top_k = 10
		offset, size, keypoint = x

		asdf = torch.max(keypoint)

		offset = torch.permute(offset, (0,2,3,1))
		size = torch.permute(size, (0,2,3,1))
		offset = torch.squeeze(offset, dim=0)
		size = torch.squeeze(size, dim=0)

		fmap_max = F.max_pool2d(keypoint, 3, stride=1, padding=1)
		keep = torch.eq(fmap_max, keypoint).float()
		#keep = (torch.abs(fmap_max - keypoint) < 1e-6).float()
		b = keypoint * keep

		b = torch.permute(b, (0,2,3,1))
		b = torch.squeeze(b, dim=0)
		c = torch.flatten(b)
		detection_scores, index = torch.topk(c, top_k)

		channel_indices_temp = index // self.class_num
		#channel_indices_temp = index
		y_indices = channel_indices_temp // self.tensor_dim
		x_indices = channel_indices_temp - (y_indices * self.tensor_dim)
		detection_classes = index - (channel_indices_temp * self.class_num)
		#detection_classes = channel_indices_temp
		combined_indices = torch.stack([y_indices, x_indices], dim=-1)

		y_indices = y_indices.long()
		x_indices = x_indices.long()
		sizes = size[y_indices, x_indices]
		offsets = offset[y_indices, x_indices]

		sizes = torch.flip(sizes, [1])
		offsets = torch.flip(offsets, [1])

		pos = combined_indices + offsets

		zero_tensors = torch.zeros((top_k, 2))
		cur_device = sizes.device
		zero_tensors = zero_tensors.to(cur_device)

		#hight_width = torch.maximum(sizes, zero_tensors)
		hight_width = sizes / 2

		min_pos = pos - hight_width
		max_pos = pos + hight_width

		boxes = torch.cat([min_pos, max_pos], dim=1)
		boxes = torch.clip(boxes, 0., self.tensor_dim-1.)
		boxes = boxes * 4.

		return boxes, detection_classes, detection_scores
